{"version":3,"sources":["components/AppHeader.js","components/AlgorithmSelector.js","components/TileTypeSelector.js","components/AlgorithmBeginButton.js","components/PathFindingOptions.js","components/GridTile.js","components/PathFindingGrid.js","components/App.js","serviceWorker.js","index.js"],"names":["AppHeader","className","AlgorithmSelector","TileTypeSelector","type","name","value","defaultChecked","AlgorithmBeginButton","React","Component","PathFindingOptions","GridTile","props","onHoverStart","setState","colour","onHoverEnd","defaultColour","state","this","style","width","height","fontSize","onMouseEnter","onMouseLeave","defaultProps","PathFindingGrid","createGrid","grid","vertical","rowTiles","horizontal","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAUeA,MARf,WACE,OACE,4BAAQC,UAAU,yBAChB,yDCYSC,MAff,WACE,OACE,yBAAKD,UAAU,aACb,qDAEE,gCACE,uCACA,4CACA,0CCiCKE,MAzCf,WACE,OACE,yBAAKF,UAAU,aACb,yBAAKA,UAAU,cACb,+BACE,2BACEG,KAAK,QACLC,KAAK,YACLC,MAAM,QACNC,gBAAc,EACdN,UAAU,qBANd,UAWF,yBAAKA,UAAU,cACb,+BACE,2BACEG,KAAK,QACLC,KAAK,YACLC,MAAM,MACNL,UAAU,qBALd,QAUF,yBAAKA,UAAU,cACb,+BACE,2BACEG,KAAK,QACLC,KAAK,YACLC,MAAM,WACNL,UAAU,qBALd,e,4BCrBOO,E,uKAJX,OAAO,4BAAQP,UAAU,iBAAlB,a,GAFwBQ,IAAMC,WCa1BC,MAVf,WACE,OACE,yBAAKV,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCRAW,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,aAAe,kBAAM,EAAKC,SAAS,CAAEC,OAAQ,kBAhB1B,EAkBnBC,WAAa,kBAAM,EAAKF,SAAS,CAAEC,OAAQ,EAAKH,MAAMK,iBAhBpD,EAAKC,MAAQ,CAAEH,OAAQ,EAAKH,MAAMK,eAFjB,E,qDAMjB,OACE,yBACEjB,UAAW,yBAA2BmB,KAAKD,MAAMH,OACjDK,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,SAAU,IAClDC,aAAcL,KAAKN,aACnBY,aAAcN,KAAKH,iB,GAZJR,IAAMC,WAsB7BE,EAASe,aAAe,CACtBT,cAAe,YAGFN,QCEAgB,E,kDA1Bb,aAAe,IAAD,8BACZ,gBACKT,MAAQ,CAAEG,MAAO,GAAIC,OAAQ,IAFtB,E,qDAMZ,OAAO,yBAAKtB,UAAU,mBAAmBmB,KAAKS,gB,mCAK9C,IADA,IAAIC,EAAO,GACFC,EAAW,EAAGA,EAAWX,KAAKD,MAAMI,SAAUQ,EAAU,CAE/D,IADA,IAAIC,EAAW,GACNC,EAAa,EAAGA,EAAab,KAAKD,MAAMG,QAASW,EACxDD,EAASE,KAAK,kBAAC,EAAD,OAEhBJ,EAAKI,KACH,yBAAKjC,UAAU,kBAAkBoB,MAAO,CAAEG,SAAU,IACjDQ,IAIP,OAAOF,M,GAvBmBrB,IAAMC,WCcrByB,MAZf,WACE,OACE,yBAAKlC,UAAU,mBACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,mBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e494df69.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction AppHeader() {\n  return (\n    <header className=\"jumbotron text-center\">\n      <h1>Path Finding Visualized</h1>\n    </header>\n  );\n}\n\nexport default AppHeader;\n","import React from \"react\";\n\nfunction AlgorithmSelector() {\n  return (\n    <div className=\"container\">\n      <label>\n        Selected algorithm:\n        <select>\n          <option>BTS</option>\n          <option>Djikstra</option>\n          <option>A*</option>\n        </select>\n      </label>\n    </div>\n  );\n}\n\nexport default AlgorithmSelector;\n","import React from \"react\";\n\nfunction TileTypeSelector() {\n  return (\n    <div className=\"container\">\n      <div className=\"form-check\">\n        <label>\n          <input\n            type=\"radio\"\n            name=\"tile-type\"\n            value=\"start\"\n            defaultChecked\n            className=\"form-check-input\"\n          ></input>\n          Start\n        </label>\n      </div>\n      <div className=\"form-check\">\n        <label>\n          <input\n            type=\"radio\"\n            name=\"tile-type\"\n            value=\"end\"\n            className=\"form-check-input\"\n          ></input>\n          End\n        </label>\n      </div>\n      <div className=\"form-check\">\n        <label>\n          <input\n            type=\"radio\"\n            name=\"tile-type\"\n            value=\"obstacle\"\n            className=\"form-check-input\"\n          ></input>\n          Obstacle\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default TileTypeSelector;\n","import React from \"react\";\n\nclass AlgorithmBeginButton extends React.Component {\n  render() {\n    return <button className=\"btn-secondary\">Begin</button>;\n  }\n}\n\nexport default AlgorithmBeginButton;\n","import React from \"react\";\nimport AlgorithmSelector from \"./AlgorithmSelector\";\nimport TileTypeSelector from \"./TileTypeSelector\";\nimport AlgorithmBeginButton from \"./AlgorithmBeginButton\";\n\nfunction PathFindingOptions() {\n  return (\n    <div className=\"container\">\n      <AlgorithmSelector />\n      <TileTypeSelector />\n      <AlgorithmBeginButton />\n    </div>\n  );\n}\n\nexport default PathFindingOptions;\n","import React from \"react\";\n\nclass GridTile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { colour: this.props.defaultColour };\n  }\n\n  render() {\n    return (\n      <div\n        className={\"border d-inline-block \" + this.state.colour}\n        style={{ width: \"30px\", height: \"30px\", fontSize: 10 }}\n        onMouseEnter={this.onHoverStart}\n        onMouseLeave={this.onHoverEnd}\n      ></div>\n    );\n  }\n\n  onHoverStart = () => this.setState({ colour: \"bg-secondary\" });\n\n  onHoverEnd = () => this.setState({ colour: this.props.defaultColour });\n}\n\nGridTile.defaultProps = {\n  defaultColour: \"bg-white\",\n};\n\nexport default GridTile;\n","import React from \"react\";\nimport GridTile from \"./GridTile\";\n\nclass PathFindingGrid extends React.Component {\n  constructor() {\n    super();\n    this.state = { width: 50, height: 15 };\n  }\n\n  render() {\n    return <div className=\"container-fluid\">{this.createGrid()}</div>;\n  }\n\n  createGrid() {\n    let grid = [];\n    for (let vertical = 0; vertical < this.state.height; ++vertical) {\n      let rowTiles = [];\n      for (let horizontal = 0; horizontal < this.state.width; ++horizontal) {\n        rowTiles.push(<GridTile />);\n      }\n      grid.push(\n        <div className=\"container-fluid\" style={{ fontSize: 0 }}>\n          {rowTiles}\n        </div>\n      );\n    }\n    return grid;\n  }\n}\n\nexport default PathFindingGrid;\n","import React from \"react\";\nimport AppHeader from \"./AppHeader\";\nimport PathFindingOptions from \"./PathFindingOptions\";\nimport PathFindingGrid from \"./PathFindingGrid\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <AppHeader />\n      <main className=\"container-fluid\">\n        <PathFindingOptions />\n        <PathFindingGrid />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}