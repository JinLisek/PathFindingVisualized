{"version":3,"sources":["components/AppHeader.js","components/AlgorithmSelector.js","components/TileTypeSelector.js","logic/Queue.js","logic/BreadthFirstSearchAlgorithm.js","components/AlgorithmBeginButton.js","components/PathFindingOptions.js","components/GridTile.js","logic/Tile.js","components/PathFindingGrid.js","components/App.js","serviceWorker.js","index.js"],"names":["AppHeader","className","AlgorithmSelector","TileTypeSelector","props","type","name","value","defaultChecked","onClick","onTileTypeChangedCallback","Queue","newElement","this","push","shift","length","breadthFirstSearch","startTile","endTile","a","state","frontier","enqueue","visited","Set","add","isEmpty","currentTile","dequeue","neighbours","nextTile","has","Promise","r","setTimeout","AlgorithmBeginButton","onBegin","React","Component","PathFindingOptions","GridTile","onTileClick","onTileClickCallback","tile","onStateChange","newState","changeTileColour","defaultColour","newColour","setState","prevState","colour","changeTileState","registerOnStateChangeObserver","style","width","height","fontSize","defaultProps","Tile","vertical","horizontal","onStateChangeCallback","neighbour","PathFindingGrid","tileGrid","rowTiles","addNeighbour","createGrid","map","row","key","App","onTileTypeChanged","selectedTileType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c386916.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction AppHeader() {\n  return (\n    <header className=\"jumbotron text-center\">\n      <h1>Path Finding Visualized</h1>\n    </header>\n  );\n}\n\nexport default AppHeader;\n","import React from \"react\";\n\nfunction AlgorithmSelector() {\n  return (\n    <div className=\"container\">\n      <label>\n        Selected algorithm:\n        <select>\n          <option>BFS</option>\n          <option>Djikstra</option>\n          <option>A*</option>\n        </select>\n      </label>\n    </div>\n  );\n}\n\nexport default AlgorithmSelector;\n","import React from \"react\";\n\nfunction TileTypeSelector(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"form-check\">\n        <label>\n          <input\n            type=\"radio\"\n            name=\"tile-type\"\n            value=\"start\"\n            defaultChecked\n            className=\"form-check-input\"\n            onClick={() => props.onTileTypeChangedCallback(\"Start\")}\n          ></input>\n          Start\n        </label>\n      </div>\n      <div className=\"form-check\">\n        <label>\n          <input\n            type=\"radio\"\n            name=\"tile-type\"\n            value=\"end\"\n            className=\"form-check-input\"\n            onClick={() => props.onTileTypeChangedCallback(\"End\")}\n          ></input>\n          End\n        </label>\n      </div>\n      <div className=\"form-check\">\n        <label>\n          <input\n            type=\"radio\"\n            name=\"tile-type\"\n            value=\"obstacle\"\n            className=\"form-check-input\"\n            onClick={() => props.onTileTypeChangedCallback(\"Obstacle\")}\n          ></input>\n          Obstacle\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default TileTypeSelector;\n","class Queue {\n  enqueue(newElement) {\n    this.#elements.push(newElement);\n  }\n\n  dequeue() {\n    return this.#elements.shift();\n  }\n\n  isEmpty() {\n    return this.#elements.length === 0;\n  }\n\n  #elements = [];\n}\n\nexport default Queue;\n","import Queue from \"../logic/Queue\";\n\nconst breadthFirstSearch = async (startTile, endTile) => {\n  startTile.state = \"Start\";\n  let frontier = new Queue();\n  frontier.enqueue(startTile);\n  let visited = new Set();\n  visited.add(startTile);\n\n  while (frontier.isEmpty() === false) {\n    const currentTile = frontier.dequeue();\n    for (const nextTile of currentTile.neighbours()) {\n      if (visited.has(nextTile) === false) {\n        if (nextTile === endTile) return;\n        frontier.enqueue(nextTile);\n        nextTile.state = \"Visited\";\n        visited.add(nextTile);\n        await new Promise((r) => setTimeout(r, 100));\n      }\n    }\n  }\n};\n\nexport default breadthFirstSearch;\n","import React from \"react\";\nimport breadthFirstSearch from \"../logic/BreadthFirstSearchAlgorithm\";\n\nclass AlgorithmBeginButton extends React.Component {\n  render() {\n    return (\n      <button className=\"btn-secondary\" onClick={this.onBegin}>\n        Begin\n      </button>\n    );\n  }\n\n  onBegin = () => {\n    if (this.props.startTile) breadthFirstSearch(this.props.startTile, this.props.endTile);\n  };\n}\n\nexport default AlgorithmBeginButton;\n","import React from \"react\";\nimport AlgorithmSelector from \"./AlgorithmSelector\";\nimport TileTypeSelector from \"./TileTypeSelector\";\nimport AlgorithmBeginButton from \"./AlgorithmBeginButton\";\n\nfunction PathFindingOptions(props) {\n  return (\n    <div className=\"container\">\n      <AlgorithmSelector />\n      <TileTypeSelector onTileTypeChangedCallback={props.onTileTypeChangedCallback} />\n      <AlgorithmBeginButton startTile={props.startTile} endTile={props.endTile} />\n    </div>\n  );\n}\n\nexport default PathFindingOptions;\n","import React from \"react\";\n\nclass GridTile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { colour: this.props.defaultColour };\n    this.props.tile.registerOnStateChangeObserver(this.onStateChange);\n  }\n\n  render() {\n    return (\n      <div\n        className={\"border d-inline-block \" + this.state.colour}\n        style={{ width: \"30px\", height: \"30px\", fontSize: 10 }}\n        onClick={this.onTileClick}\n      ></div>\n    );\n  }\n\n  onTileClick = () => this.props.onTileClickCallback(this.props.tile);\n\n  onStateChange = (newState) => {\n    if (newState === \"Default\") this.changeTileColour(this.props.defaultColour);\n    else if (newState === \"Start\") this.changeTileColour(\"bg-success\");\n    else if (newState === \"Visited\") this.changeTileColour(\"bg-warning\");\n    else if (newState === \"End\") this.changeTileColour(\"bg-danger\");\n    else if (newState === \"Obstacle\") this.changeTileColour(\"bg-secondary\");\n  };\n\n  changeTileColour = (newColour) =>\n    this.setState((prevState, props) => ({\n      colour: newColour,\n    }));\n  changeTileState = (newState) => (this.props.tile.state = newState);\n}\n\nGridTile.defaultProps = {\n  defaultColour: \"bg-white\",\n};\n\nexport default GridTile;\n","class Tile {\n  constructor(vertical, horizontal) {\n    this.onStateChangeCallback = null;\n    this.vertical = vertical;\n    this.horizontal = horizontal;\n  }\n\n  registerOnStateChangeObserver(onStateChangeCallback) {\n    this.onStateChangeCallback = onStateChangeCallback;\n  }\n\n  set state(newState) {\n    this.#state = newState;\n    if (this.onStateChangeCallback) this.onStateChangeCallback(this.#state);\n  }\n\n  get state() {\n    return this.#state;\n  }\n\n  addNeighbour(neighbour) {\n    this.#neighbours.push(neighbour);\n  }\n\n  neighbours() {\n    return this.#neighbours;\n  }\n\n  #state = \"Default\";\n  #neighbours = [];\n}\n\nexport default Tile;\n","import React from \"react\";\nimport GridTile from \"./GridTile\";\nimport Tile from \"../logic/Tile\";\n\nclass PathFindingGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let tileGrid = [];\n    const width = 50;\n    const height = 15;\n\n    for (let vertical = 0; vertical <= height; ++vertical) {\n      let rowTiles = [];\n      for (let horizontal = 0; horizontal <= width; ++horizontal) {\n        rowTiles.push(new Tile(vertical, horizontal));\n      }\n      tileGrid.push(rowTiles);\n    }\n\n    for (let vertical = 0; vertical < tileGrid.length; ++vertical) {\n      for (let horizontal = 0; horizontal < tileGrid[vertical].length; ++horizontal) {\n        let tile = tileGrid[vertical][horizontal];\n        if (horizontal - 1 >= 0) tile.addNeighbour(tileGrid[vertical][horizontal - 1]);\n        if (horizontal + 1 <= width) tile.addNeighbour(tileGrid[vertical][horizontal + 1]);\n        if (vertical - 1 >= 0) tile.addNeighbour(tileGrid[vertical - 1][horizontal]);\n        if (vertical + 1 <= height) tile.addNeighbour(tileGrid[vertical + 1][horizontal]);\n      }\n    }\n\n    this.state = { width, height, tileGrid };\n  }\n\n  render() {\n    return <div className=\"container-fluid\">{this.createGrid()}</div>;\n  }\n\n  onTileClick = (tile) => this.props.onTileClickCallback(tile);\n\n  createGrid() {\n    return this.state.tileGrid.map((row) => (\n      <div className=\"container-fluid\" style={{ fontSize: 0 }} key={\"Row:\" + row[0].vertical}>\n        {row.map((tile) => (\n          <GridTile\n            key={\"Tile:\" + tile.vertical + \"#\" + tile.horizontal}\n            tile={tile}\n            onTileClickCallback={this.onTileClick}\n          />\n        ))}\n      </div>\n    ));\n  }\n}\n\nexport default PathFindingGrid;\n","import React from \"react\";\nimport AppHeader from \"./AppHeader\";\nimport PathFindingOptions from \"./PathFindingOptions\";\nimport PathFindingGrid from \"./PathFindingGrid\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { startTile: null, endTile: null, selectedTileType: \"Start\" };\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <AppHeader />\n        <main className=\"container-fluid\">\n          <PathFindingOptions\n            startTile={this.state.startTile}\n            endTile={this.state.endTile}\n            onTileTypeChangedCallback={this.onTileTypeChanged}\n          />\n          <PathFindingGrid onTileClickCallback={this.onTileClick} />\n        </main>\n      </div>\n    );\n  }\n\n  onTileTypeChanged = (selectedTileType) =>\n    this.setState((prevState, props) => ({\n      selectedTileType: selectedTileType,\n    }));\n\n  onTileClick = (tile) =>\n    this.setState((prevState, props) => {\n      tile.state = this.state.selectedTileType;\n\n      if (this.state.selectedTileType === \"Start\") {\n        if (prevState.startTile && tile !== prevState.startTile) prevState.startTile.state = \"Default\";\n        return {\n          startTile: tile,\n          endTile: tile === prevState.endTile ? null : prevState.endTile,\n        };\n      }\n\n      if (this.state.selectedTileType === \"End\") {\n        if (prevState.endTile && tile !== prevState.endTile) prevState.endTile.state = \"Default\";\n        return { endTile: tile, startTile: tile === prevState.startTile ? null : prevState.startTile };\n      }\n\n      return {\n        startTile: tile === prevState.startTile ? null : prevState.startTile,\n        endTile: tile === prevState.endTile ? null : prevState.endTile,\n      };\n    });\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}